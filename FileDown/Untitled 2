
1. 파일 업로드 할 폼 만들기

<fileUploadForm.html>
<form action="Upload" method="post" enctype="multipart/form-data" >
	<input type="file" name="filename1">
</form>

** '파일을 업로드' 시 <form> 태그에서 
enctype="multipart/form-data" 라는 속성을 반드시 써야함
안쓸경우, 웹 서버로 데이터를 넘길때 파일의 경로명만 전송되고, 파일 내용은 전송되지 않음

***이때, method 속성은 'post' 로 지정해줘야함(용량이 크기때문에)


<form> 태그의 속성인 method, action, enctype 등은 입력받은 데이터를 어떻게 처리할 것인지
세부적으로 설정하는데 사용

method : 전송 방식
action : 전송 목적지
enctype : 전송되는 데이터 형식

***enctype 속성은 다음의 3가지 값으로 지정
1. application/www-form-urlencoded 
enctype을 따로 설정하지 않을 경우, 기본값. 
폼데이터는 서버로 전송되기 전에 URL-Encode 됨

2. multipart/form-data
파일이나 이미지를 서버로 전송할 경우 사용

3. text/plain
인코딩을 하지 '않은' 문자 상태
------------------------------------------------------------
<UploadServlet.java>  </Upload>

@WebServlet("/Upload")
@MultipartConfig(maxFileSize=1024*1024*2, location="c://Upload")
//업로드 할 파일의 최대 크기 : 2Mbyte, 파일을 저장할 디렉토리 : c://Upload 


2. 폼으로 보낸거 doPost 에서 받음
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

	request.setCharacterEncoding("utf-8");
	
	Part part = request.getPart("theFile"); //업로드 폼에서 넘어온 파일
	String fileName= getFilename(part); //part정보를 이용해 업로드 파일명을 리턴
	
	if(fileName != null && !fileName.isEmpty()){ //파일명이 있는경우
		part.write(fileName);
		}


	//multipart 형식의 폼 데이터는 getBytes()를 사용하여 인코딩 처리함
	String author = request.getParameter("theAuthor");
	author = new String(author.getBytes("utf-8"),"UTF-8");
	
	response.setContentType("text/html; charset=UTF-8");
	PrintWriter out = response.getWriter();
	out.print("작성자" + author );
	out.print("파일명 : <a href='FileDown?file_name='+fileName+"'>" + fileName +"</a>")
	out.print("파일크기  : " + part.getSize())
}

---------------------------------------------------------
<DownloadServlet.java> </FileDown>


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

3. a href에서 파라미터로 넘긴거 여기서 request로 받음

	String fileName = request.getParameter("file_name");
	String downloadPath = "c:\\upload\\";
	String filePath = downdownload + fileName; //다운로드 경로에 파일 이름 붙이기
	
	byte b[] = new byte[4096]; //byte 배열을 이용하여 저장공간 만들기
	
	FileInputStream in = new FileInputStream(filePath);
	String mimeType = getServletContext().getMimeType(filePath);
	
	if(mimeType == null){
		mimeType = "application/octet-stream";
		
		// 두개의 주요 MIME 타입은 기본 타입에 있어 중요한 역할을 함

		1. text/plain 
		- 텍스트 파일을 위한 기본값
		- 인간이 읽을수 있어야 하기 때문에 이진 데이터를 포함해서는 안됨
		
		2. application/octet-stream
		- 텍스트 파일을 제외한 다른 모든 경우를 위한 기본값
		- 알려지지 않은 파일 타입은 이 타입을 사용해야함
		- 문서 종류 : 아카이브 문서 (인코딩된 다중파일)


	}
	response.setContentType(mimeType); //mimeType으로 인코딩?
	
	String encTitle = new String(fileName.getBytes("UTF-8"),"8859_1");
	String encoding = URLEncoder.encode(encTitle,"utf-8");
	
	//다운로드 내역을 화면에 보여줌
	response.setHeader("Content-Disposition", "attachment; filename=" + encoding);
	ServletOutputStream out = response.getOutputStream();
	
	int numRead; //읽어들인 문서의 용량
	
	while( (numRead = in.read(b, 0, b.length)) != -1  ){
		out.write(b, 0, numRead);
	}

	out.flush();
	out.close();
	in.close();

-----------------------------------------------------------

ServletConfig : 특정 서블릿에 등록하여 사용하는 값

<init-param>
	<param-name></param-name>
	<param-value></param-value>
</init-param>



ServletContext : 웹 어플리케이션 전역에서 사용할 수 있는 값

<context-param>
	<param-name></param-name>
	<param-value></param-value>
</context-param>



::: ServletContext 활용

<web.xml>

<context-param>
	<param-name>company</param-name>
	<param-value>increpas</param-value>
</context-param>

==========================================
<InitParam.java>

String company = getServletContext().getInitParameter("company");

===========================================

::: ServletConfig 활용

<web.xml>

<servlet>
	<servlet-name>InitParam</servlet-name>
	<servlet-class>com.servletex.Initparam</servlet-class>
	
	<init-param>
		<param-name>tel</param-name>
		<param-value>010-1234-5678</param-value>
	</init-param>
</servlet>

<servlet-mapping>
	<servlet-name>InitParam</servlet-name>
	<url-pattern>/Initparam</url-pattern>
	
</servlet-mapping>





}































